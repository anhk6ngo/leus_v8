@page "/Account/Admin-ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Sections
@inject IJSRuntime _jsRuntime
@inject IdentityRedirectManager RedirectManager
@inject UserManager<CustomUser> UserManager
@attribute [Authorize(Roles = RoleConstants.AdministratorRole)]
<PageTitle>Admin Reset password</PageTitle>

<h1>Admin Reset password</h1>
<hr/>
<StatusMessage Message="@Message"/>
<EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
        <label for="email" class="form-label">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger"/>
    </div>
    <div class="fv-row mb-8" data-kt-password-meter="true">
        <div class="mb-1">
            <div class="position-relative mb-3">
                <InputText class="form-control" type="password" placeholder="Please enter your password." @bind-Value="Input.Password" aria-required="true" autocomplete="new-password"/>
                <span class="btn btn-sm btn-icon position-absolute translate-middle top-50 end-0 me-n2" data-kt-password-meter-control="visibility">
                    <i class="ki-duotone ki-eye-slash fs-2"></i>
                    <i class="ki-duotone ki-eye fs-2 d-none"></i>
                </span>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="d-flex align-items-center mb-3" data-kt-password-meter-control="highlight">
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px"></div>
            </div>
        </div>
        <div class="text-muted">
            Use 8 or more characters with a mix of letters, numbers & symbols.
        </div>
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
        <label for="confirm-password" class="form-label">Confirm password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-custom">Reset</button>
</EditForm>
<SectionContent SectionName="TbRight">
    <DisplayRightImage Image="images/resetpwd.svg"></DisplayRightImage>
</SectionContent>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        var result = await UserManager.ResetPasswordAsync(user, code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }

        identityErrors = result.Errors;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("initPasswordMeter", "form_register");
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}