@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using Leus.Application.Features.Catalog.Commands
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime _jsRuntime
@inject UserManager<CustomUser> UserManager
@inject IUserStore<CustomUser> UserStore
@inject SignInManager<CustomUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMediator Mediator
<PageTitle>Register</PageTitle>

<h1>Register</h1>
<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" id="form_register">
    <DataAnnotationsValidator />
    <h2>Create a new account.</h2>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.DisplayName" class="form-control" autocomplete="off" aria-required="true" placeholder="Your name" />
        <label for="displayName">Full Name</label>
        <ValidationMessage For="() => Input.DisplayName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>
    <div class="fv-row mb-8" data-kt-password-meter="true">
        <div class="mb-1">
            <div class="position-relative mb-3">    
                <InputText class="form-control" type="password" placeholder="Please enter your password." @bind-Value="Input.Password" aria-required="true" autocomplete="new-password"/>
                <span class="btn btn-sm btn-icon position-absolute translate-middle top-50 end-0 me-n2" data-kt-password-meter-control="visibility">
                    <i class="ki-duotone ki-eye-slash fs-2"></i>
                    <i class="ki-duotone ki-eye fs-2 d-none"></i>
                </span>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="d-flex align-items-center mb-3" data-kt-password-meter-control="highlight">
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px me-2"></div>
                <div class="flex-grow-1 bg-secondary bg-active-success rounded h-5px"></div>
            </div>
        </div>
        <div class="text-muted">
            Use 8 or more characters with a mix of letters, numbers & symbols.
        </div>
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="confirm-password">Confirm Password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Phone" class="form-control" autocomplete="off" aria-required="true" placeholder="Your phone" />
        <label for="phone">Phone</label>
        <ValidationMessage For="() => Input.Phone" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.ContactPerson" class="form-control" autocomplete="off" aria-required="true" placeholder="Contact Person" />
        <label for="contactPerson">Contact Person</label>
        <ValidationMessage For="() => Input.ContactPerson" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputTextArea @bind-Value="Input.Address" class="form-control" autocomplete="off" aria-required="true" placeholder="Address" style="height: 100px"/>
        <label for="address">Address</label>
        <ValidationMessage For="() => Input.Address" class="text-danger"/>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-custom">Register</button>
</EditForm>
<SectionContent SectionName="TbRight">
    <DisplayRightImage Image="images/signup.svg"></DisplayRightImage>
</SectionContent>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("initPasswordMeter", "form_register");
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.Name = Input.DisplayName;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");
        await UserManager.AddClaimAsync(user, new Claim("DisplayName", Input.DisplayName));
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        await UserManager.ConfirmEmailAsync(user, code);
        var newCustom = new CCustomerDto()
        {
            Address = Input.Address,
            Name = Input.DisplayName,
            Phone = Input.Phone,
            ContactPerson = Input.ContactPerson,
            Email = Input.Email,
            Code = Path.GetFileNameWithoutExtension(Path.GetRandomFileName())
        };
        await Mediator.Send(new AddEditCustomerCommand()
        {
           Request = new AddEditDataRequest<CCustomerDto>()
           {
               Action = ActionCommandType.Add,
               Data = newCustom
           }
        });
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private CustomUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<CustomUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(CustomUser)}'. " +
                $"Ensure that '{nameof(CustomUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<CustomUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<CustomUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Full Name")]
        public string DisplayName { get; set; } = "";
        
        [Required]
        [Display(Name = "Phone")]
        public string Phone { get; set; } = "";
        
        [Display(Name = "Contact Person")]
        public string ContactPerson { get; set; } = "";
        [Required]
        [Display(Name = "Address")]
        [MaxLength(500)]
        public string Address { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
