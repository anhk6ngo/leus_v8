@page "/portal/customer"
@using Leus.Application.Features.Catalog.Commands
@using Leus.Application.Features.Catalog.Queries
@attribute [Authorize(Roles = $"{RoleConstants.InputCatalog},{RoleConstants.AdministratorRole}")]
<PageTitle>Customer</PageTitle>
<SectionContent SectionName="@NavConstants.TopLeft">
    <Breadcrumb Slash="true"></Breadcrumb>
    <Breadcrumb TextMuted="true">Customer</Breadcrumb>
</SectionContent>
<SectionContent SectionName="@NavConstants.TopRight">
    <button class="btn btm-sm btn-custom align-self-center" @onclick="() => FormAction(-1, 0)">
        <i class="fa fa-plus-square"></i>Add new
    </button>
</SectionContent>
@if (IsLoading)
{
    <LoadingRotate/>
}
<Card Title="List of Customer">
    @if (_items == null || IsLoading)
    {
        <Loading/>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-rounded table-striped border gy-7 gs-7" id="@UiConstants.TableId">
                <thead>
                <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                    <th>Code</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var t in _items.WithIndex())
                {
                    <tr>
                        <th>@t.item.Code</th>
                        <td>@t.item.Name</td>
                        <td>@t.item.Address</td>
                        <td>@t.item.Email</td>
                        <td>@t.item.Phone</td>
                        <td>
                            <button @key="Guid.NewGuid()" class="btn btn-sm btn-success"
                                    @onclick="@(() => FormAction(t.index, 1))">
                                Edit
                            </button>
                            <button @key="Guid.NewGuid()" class="btn btn-sm btn-danger"
                                    @onclick="@(() => FormAction(t.index, 2))">
                                Delete
                            </button>
                            <button @key="Guid.NewGuid()" class="btn btn-sm btn-warning"
                                    @onclick="@(() => FormAction(t.index, 3))">
                                Copy
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</Card>
<CustomModal Title="@($"{Title} Customer")" OnClickCallback="SaveData" ModalClass="3">
    <EditForm Model="data" class="form">
        <FluentValidationValidator @ref="_fluentValidationValidator"/>
        <div class="row mb-7">
            <div class="col-md-3">
                <label class="required form-label">Code</label>
                <InputText type="text" @bind-Value="@data!.Code" class="form-control maxlength" maxlength="50"/>
                <ValidationMessage For="@(() => data.Code)"/>
            </div>
            <div class="col-md-3">
                <label class="form-label">Tax No</label>
                <InputText type="text" @bind-Value="@data!.TaxNo" class="form-control maxlength" maxlength="50"/>
                <ValidationMessage For="@(() => data.TaxNo)"/>
            </div>
            <div class="col-md-3">
                <label class="form-label">Sign Date</label>
                <InputDate @bind-Value="@data!.SignContract" class="form-control" data-control="date-picker"/>
                <ValidationMessage For="@(() => data.SignContract)"/>
            </div>
            <div class="col-md-3">
                <label
                    class="form-check form-switch form-check-custom form-check-success form-check-solid">
                    <input class="form-check-input me-2" type="checkbox" @bind="@data.IsPublic"/>
                    <span>Is Public</span>
                </label>
            </div>
        </div>
        <div class="row mb-7">
            <div class="col-md-6">
                <label class="required form-label">Name</label>
                <InputText type="text" @bind-Value="@data.Name" class="form-control maxlength" maxlength="255"/>
                <ValidationMessage For="@(() => data.Name)"/>
            </div>
            <div class="col-md-6">
                <label class="form-label">Contact Person</label>
                <InputText type="text" @bind-Value="@data.ContactPerson" class="form-control maxlength"
                           maxlength="255"/>
                <ValidationMessage For="@(() => data.ContactPerson)"/>
            </div>
        </div>
        <div class="row mb-7">
            <label class="form-label">Address</label>
            <InputTextArea type="text" @bind-Value="@data.Address" class="form-control maxlength" maxlength="500"/>
            <ValidationMessage For="@(() => data.Address)"/>
        </div>
        <div class="row mb-7">
            <div class="col-md-4">
                <label class="form-label">Phone</label>
                <InputText type="text" @bind-Value="@data!.Phone" class="form-control maxlength" maxlength="50"/>
                <ValidationMessage For="@(() => data.Phone)"/>
            </div>
            <div class="col-md-4">
                <label class="form-label">Email</label>
                <InputText type="text" @bind-Value="@data!.Email" class="form-control maxlength" maxlength="255"/>
                <ValidationMessage For="@(() => data.Email)"/>
            </div>
            <div class="col-md-4">
                <label class="form-label">Bank Account</label>
                <InputText type="text" @bind-Value="@data!.BankAccount" class="form-control maxlength" maxlength="50"/>
                <ValidationMessage For="@(() => data.BankAccount)"/>
            </div>
        </div>
        <div class="row mb-7">
            <label class="form-label">Bank Name</label>
            <InputText type="text" @bind-Value="@data!.BankName" class="form-control maxlength" maxlength="255"/>
            <ValidationMessage For="@(() => data.BankName)"/>
        </div>
    </EditForm>
</CustomModal>

@code {
    private List<CCustomerDto>? _items;
    private CCustomerDto? data = new();
    private int iAction { get; set; } = 0;
    private string Title { get; set; } = "Add new";
    private FluentValidationValidator _fluentValidationValidator = default!;

    protected override async Task OnInitializedAsync()
    {
        _items = await Mediator.Send(new GetAllCustomerQuery());
        InitDataTable = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (InitDataTable)
        {
            InitDataTable = false;
            await CallInitialDataTable();
        }
    }

    private async Task FormAction(int index, int action)
    {
        data = new CCustomerDto();
        if (index >= 0)
        {
            _items![index].Adapt(data);
        }

        iAction = action;
        Title = action switch
        {
            1 => "Edit",
            2 => "Delete",
            _ => "Add new"
        };
        if (action == 3)
        {
            data.Id = Guid.Empty;
        }

        await ToggleModal();
        await SetTextNum();
        await CallDatePicker();
    }

    private async Task SaveData()
    {
        var isValid = _fluentValidationValidator.Validate(o => o.IncludeAllRuleSets());
        if (!isValid) return;
        IsLoading = true;
        StateHasChanged();
        var result = new Result<Guid>();
        switch (iAction)
        {
            case 2:
                if (data != null)
                {
                    result = await Mediator.Send(new DeleteCustomerCommand { Id = data.Id });
                    if (result.Succeeded)
                    {
                        _items = _items?.Where(w => w.Id != data.Id).ToList();
                    }
                }

                break;
            default:
                result = await Mediator.Send(new AddEditCustomerCommand()
                {
                    Request = new AddEditDataRequest<CCustomerDto>()
                    {
                        Data = data!,
                        Action = iAction == 1 ? ActionCommandType.Edit : ActionCommandType.Add,
                    }
                });
                if (result.Succeeded)
                {
                    if (iAction != 1)
                    {
                        data!.Id = result.Data;
                        _items?.Add(data);
                    }
                    else
                    {
                        var oFind = _items!.FirstOrDefault(w => w.Id == data!.Id);
                        if (oFind != null)
                        {
                            data.Adapt(oFind);
                        }
                    }
                }

                break;
        }

        await ShowAlert(result.Messages[0], result.Succeeded ? 0 : 1);
        IsLoading = false;
        InitDataTable = true;
        StateHasChanged();
        await ToggleModal();
    }

}