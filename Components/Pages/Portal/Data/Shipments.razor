@page "/portal/shipments"
@attribute [Authorize]
@attribute [StreamRendering]
@using Leus.Application.Features.Catalog.Queries
@using Leus.Application.Features.Data.Commands
@using LeUs.Application.Features.Data.Commands
@inject ILeUsService LeUsService
<SectionContent SectionName="@NavConstants.TopLeft">
    <Breadcrumb Slash="true"></Breadcrumb>
    <Breadcrumb TextMuted="true">@(ShowEdit ? "Edit Shipment" : "List of Shipment")</Breadcrumb>
</SectionContent>
@if (!ShowEdit)
{
    <div class="col-md-10 offset-1">
        <div class="card mb-7">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="position-relative w-md-200px me-md-2">
                        <i class="ki-duotone ki-calendar-search fs-3 text-gray-500 position-absolute top-50 translate-middle ms-6">
                            <span class="path1"></span><span class="path2"></span>
                        </i>
                        <input @bind="DateRange" class="form-control form-control-sm ps-10"
                               placeholder="Pick date range" id="RangeDate"/>
                    </div>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-primary me-5" @onclick="GetData">Get Data</button>
                        <div class="d-flex flex-stack me-2">
                            <div class="form-check me-2">
                                <input class="form-check-input" type="radio" value="0" checked="@(iState == 0)"
                                       id="flexState"
                                       name="rdoState" @onchange="async () => { await FilterData(0); }">
                                <label class="form-check-label" for="flexState">
                                    Draft
                                </label>
                            </div>
                            <div class="form-check me-2">
                                <input class="form-check-input" type="radio" checked="@(iState == 1)" value="1"
                                       id="flexState1"
                                       name="rdoState" @onchange="async () => { await FilterData(1); }">
                                <label class="form-check-label" for="flexState1">
                                    Label
                                </label>
                            </div>
                            <div class="form-check me-2">
                                <input class="form-check-input" type="radio" checked="@(iState == 2)" value="2"
                                       id="flexState1"
                                       name="rdoState" @onchange="async () => { await FilterData(2); }">
                                <label class="form-check-label" for="flexState1">
                                    Cancel
                                </label>
                            </div>
                        </div>
                        <a href="#" id="search_advanced_link" class="btn btn-link me-2" data-bs-toggle="collapse"
                           data-bs-target="#advanced_search_form">Advanced Search</a>
                        @* <label *@
                        @*     class="form-check form-switch form-check-custom form-check-success form-check-solid px-2 me-2"> *@
                        @*     <input class="form-check-input" type="checkbox" @bind="@_request.IsTimeOut"/> *@
                        @*     <span> *@
                        @*         Time-out *@
                        @*     </span> *@
                        @* </label> *@
                    </div>
                </div>
                <div class="collapse" id="advanced_search_form">
                    <div class="separator separator-dashed mt-9 mb-6"></div>
                    <div class="row g-8 mb-8">
                        <div class="col-lg-6">
                            <label class="fs-6 form-label fw-bold text-gray-900">Ids</label>
                            <input type="text" class="form-control form-control form-control-solid"
                                   @bind="_request.RefId"/>
                        </div>
                        <div class="col-lg-6">
                            <div class="d-flex flex-stack mt-8">
                                <div class="form-check me-2">
                                    <input class="form-check-input" type="radio" value="0"
                                           checked="@(_request.RefType == 0)"
                                           name="rdoRef" @onchange="() => { _request.RefType = 0; }">
                                    <label class="form-check-label" for="flexState">
                                        Reference Id
                                    </label>
                                </div>
                                <div class="form-check me-2">
                                    <input class="form-check-input" type="radio" value="1"
                                           checked="@(_request.RefType == 1)"
                                           name="rdoRef" @onchange="() => { _request.RefType = 1; }">
                                    <label class="form-check-label" for="flexState">
                                        Reference 2 Id
                                    </label>
                                </div>
                                <div class="form-check me-2">
                                    <input class="form-check-input" type="radio" value="2"
                                           checked="@(_request.RefType == 2)"
                                           name="rdoRef" @onchange="() => { _request.RefType = 2; }">
                                    <label class="form-check-label" for="flexState">
                                        Tracking Id
                                    </label>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (IsLoading)
{
    <LoadingRotate/>
}
@if (ShowEdit)
{
    <InputShipment Data="_data" LService="Services" LCountry="Countries" LStores="Stores" SaveChange="OnSaveChange"
                   EditData="true">
    </InputShipment>
}
else
{
    if (!HideTable)
    {
        <Card Title="List of Shipment">
            <ToolbarRight>
                @if (iState == 0)
                {
                    <button class="btn btn-primary btn-sm" @onclick="GenerateLabel">Generate Label</button>
                    <button class="btn btn-danger btn-sm" @onclick="DeleteShipment">Delete Shipments
                    </button>
                }
                @if (iState == 1)
                {
                    <div class="d-flex flex-stack">
                        <span class="me-2">File Type</span>
                        <div class="form-check me-2">
                            <input class="form-check-input" type="radio" value="0" checked="@(iFileName == 0)"
                                   id="flexFileType"
                                   name="rdoFileType" @onchange="() => iFileName = 0">
                            <label class="form-check-label" for="flexFileType">
                                Tracking Id
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" value="1" checked="@(iFileName == 1)"
                                   id="flexFileType1"
                                   name="rdoFileType" @onchange="() => iFileName = 1">
                            <label class="form-check-label" for="flexFileType1">
                                Ref 2
                            </label>
                        </div>
                    </div>
                    <button class="btn btn-success btn-sm" @onclick="GetLabel">Download Label
                    </button>
                    <button class="btn btn-danger btn-sm" @onclick="CancelLabel">Cancel Label
                    </button>
                }
            </ToolbarRight>
            <ChildContent>
                @if (_items == null || IsLoading)
                {
                    <Loading/>
                }
                else
                {
                    <table class="table table-hover table-rounded table-striped border gy-7 gs-7 nowrap w-100"
                           id="@UiConstants.TableId">
                        <thead>
                        <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                            <th class="w-10px pe-2">
                                <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                                    <input class="form-check-input" type="checkbox" data-kt-check="true"
                                           data-kt-check-target="#@UiConstants.TableId .form-check-input" value="1"/>
                                </div>
                            </th>
                            @* <th>Select All *@
                            @*     <label class="form-check form-check-custom form-check-solid form-check-sm ms-2"> *@
                            @*         <input type="checkbox" class="form-check-input border border-danger" @bind="blnAll" *@
                            @*                @bind:after="SetSelect"/> *@
                            @*     </label> *@
                            @* </th> *@
                            <th>Date</th>
                            <th>No</th>
                            <th>Ref</th>
                            <th>Track Id</th>
                            <th>Service Code</th>
                            <th>Sender</th>
                            <th>Receiver</th>
                            <th>Weight</th>
                            <th>Dimension</th>
                            <th>Zone</th>
                            <th>Price</th>
                            <th class="text-end">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var t in _itemsFilter!.WithIndex())
                        {
                            <tr>
                                @* <td> *@
                                @*     <label class="form-check form-check-custom form-check-solid form-check-sm me-1"> *@
                                @*         @if (lstCheckship.Contains($"{t.item.ReferenceId}")) *@
                                @*         { *@
                                @*             <input @key="@($"{t.item.Id}_1")" type="checkbox" *@
                                @*                    checked class="form-check-input border border-danger" *@
                                @*                    @onchange="(arg) => CheckOrder(t.item.ReferenceId, arg)"/> *@
                                @*         } *@
                                @*         else *@
                                @*         { *@
                                @*             <input @key="@($"{t.item.Id}_2")" type="checkbox" *@
                                @*                    class="form-check-input border border-danger" *@
                                @*                    @onchange="(arg) => CheckOrder(t.item.ReferenceId, arg)"/> *@
                                @*         } *@
                                @*     </label> *@
                                @* </td> *@
                                <td>
                                    <div class="form-check form-check-sm form-check-custom form-check-solid">
                                        <input class="form-check-input select-shipment-item" type="checkbox" value="1"
                                               reference-id="@t.item.ReferenceId"/>
                                    </div>
                                </td>
                                <td>@t.item.CreatedOn.ToDmy()</td>
                                <th>@t.item.ReferenceId</th>
                                <th>@t.item.ReferenceId2</th>
                                <th>@t.item.TrackIds</th>
                                <td>@t.item.ServiceCode</td>
                                <td>@t.item.Shipper?.Name</td>
                                <td>@t.item.Consignee?.Name</td>
                                <td>@t.item.Weight @GetUnitType(t.item.UnitType)</td>
                                <td>@t.item.Dimesion()</td>
                                <td>@t.item.ZonePrice</td>
                                <td>@t.item.TotalPrice().ToString("N2")</td>
                                <td>
                                    @if (t.item.ShipmentStatus == 0)
                                    {
                                        <button class="btn btn-sm btn-icon btn-primary me-2"
                                                @onclick="@(() => FormAction(t.index, 1))">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-icon btn-danger"
                                                @onclick="@(() => FormAction(t.index, 2))">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </ChildContent>
        </Card>
    }
}

<CustomModal Title="The Results" HideSaveButton="true" ModalClass="2">
    @if (_labelResults is { Count: > 0 })
    {
        <table class="table table-striped">
            <thead>
            <tr class="fw-semibold fs-6 text-gray-800 border-bottom-2 border-gray-200">
                <th>Shipment Id</th>
                <th class="w-50px">Status</th>
                <th>Messages</th>
            </tr>
            </thead>
            <tbody class="scroll mh-550px">
            @foreach (var item in _labelResults)
            {
                <tr>
                    <td class="fw-semibold">@item.RequestId</td>
                    <td>
                        <span
                            class="badge py-3 px-4 fs-7 @(item.Success == true ? "badge-light-success" : "badge-light-danger")">@item.Success</span>
                    </td>
                    <td>@item.ErrorMessage</td>
                </tr>
            }
            </tbody>
        </table>
    }
</CustomModal>

@code {
    private List<CShipmentDto>? _items;
    private List<CShipmentDto>? _itemsFilter;
    private List<CResult<string>> _labelResults = [];
    private List<string> lstCheckship = [];
    private List<CServiceDto> Services { get; set; } = [];
    private List<CCountryDto> Countries { get; set; } = [];
    private List<CStoreAddressDto> Stores { get; set; } = [];
    private CShipmentDto? _data = new();
    private int iAction { get; set; } = 0;
    private string Title { get; set; } = "Add new";
    private bool ShowEdit { get; set; } = false;
    private bool blnAll { get; set; } = false;
    private int iState = 0;
    private int iFileName = 0;
    [CascadingParameter] private UserInfo? ShareUserInfo { get; set; }

    private GetReportRequest _request = new()
    {
    };

    protected override void OnInitialized()
    {
        DateRange = "".InitDateRange(iEnd: -3);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _request.UserId = $"{ShareUserInfo?.UserId}";
            Services = await Mediator.Send(new GetAllServiceQuery());
            Countries = await Mediator.Send(new GetAllCountryQuery());
            Stores = await Mediator.Send(new GetAllStoreAddressQuery());
            var customerId = await Mediator.Send(new GetAllCustomerByEmailQuery()
            {
                Email = $"{ShareUserInfo?.Email}"
            });
            Stores = customerId.IsNullOrEmpty() ? Stores.Where(w => w.CustomerId.IsNullOrEmpty()).ToList() : Stores.Where(w => w.CustomerId.IsNullOrEmpty() || w.CustomerId == customerId).ToList();

            await GetData();
            await CallInitRangeDate();
        }

        if (InitDataTable)
        {
            InitDataTable = false;
            await CallInitMenu();
            await CallJs("initFixTable", UiConstants.TableId, 3, 1);
        }

        if (ShowEdit)
        {
            await SetSelectTextNum();
            await CallJs("fixedToolbar", true);
        }
    }


    private async Task FormAction(int index, int action)
    {
        if (action == 2)
        {
            var iConfirm = await Confirm("Do you want to delete this shipment?");
            if (!iConfirm) return;
            var id = _itemsFilter![index].Id;
            ShowHideLoading();
            var result = await Mediator.Send(new DeleteShipmentCommand()
            {
                Id = id
            });
            if (result.Succeeded)
            {
                _items = _items?.Where(w => w.Id != id).ToList();
                _itemsFilter = _itemsFilter?.Where(w => w.Id != id).ToList();
            }

            ShowHideLoading(isShow: false, initTable: true);
            return;
        }

        _data = new CShipmentDto();
        _itemsFilter![index].Adapt(_data);
        ShowEdit = true;
        StateHasChanged();
    }

    private async Task GetData()
    {
        ShowHideLoading();
        _request.DateRange = DateRange;
        var rqData = new GetAllShipmentByUserQuery()
        {
            Status = _request.Status,
            DateRange = _request.DateRange,
            UserId = _request.UserId,
            IsTimeOut = _request.IsTimeOut
        };
        if (_request.RefId.NotIsNullOrEmpty())
        {
            switch (_request.RefType)
            {
                case 1:
                    rqData.Ref2Ids = $"{_request.RefId}".SplitExt().ToList();
                    break;
                case 2:
                    rqData.TrackIds = $"{_request.RefId}".SplitExt().ToList();
                    break;
                default:
                    rqData.RefIds = $"{_request.RefId}".SplitExt().ToList();
                    break;
            }
        }

        _items = await Mediator.Send(rqData);
        _items = _items.OrderByDescending(o => o.CreatedOn).ToList();
        if (_request.IsTimeOut)
        {
            iState = 1;
        }

        FilterBy();
    }

    private void FilterBy()
    {
        lstCheckship = [];
        _itemsFilter = iState switch
        {
            0 => _items?.Where(w => w.ShipmentStatus < 2).ToList(),
            1 => _items?.Where(w => w.ShipmentStatus == 2).ToList(),
            _ => _items?.Where(w => w.ShipmentStatus is 3 or 5).ToList()
        };
        ShowHideLoading(isShow: false, initTable: true);
    }

    private void CheckOrder(string? shipmentId, ChangeEventArgs obj)
    {
        var blnCheck = Convert.ToBoolean(obj.Value);
        if (blnCheck)
        {
            if (!lstCheckship.Contains($"{shipmentId}"))
                lstCheckship.Add($"{shipmentId}");
        }
        else
        {
            lstCheckship.Remove($"{shipmentId}");
        }
    }

    private void SetSelect()
    {
        if (_items is { Count: 0 })
        {
            lstCheckship = [];
            return;
        }

        lstCheckship = blnAll ? _items!.Select(s => $"{s.ReferenceId}").ToList() : [];
    }

    private string GetStatus(int status)
    {
        return status switch
        {
            1 => "Deleted",
            2 => "Created Label",
            3 => "Cancel Label",
            _ => "Draft"
        };
    }

    private async Task GenerateLabel()
    {
        var selectRefId = await JsRuntime.InvokeAsync<string[]>("GetCheckBoxAtt", "select-shipment-item", "reference-id");
        if (selectRefId.Length == 0) return;
        var iConfirm = await Confirm($"Do you want to generate these label? <p>Total shipment:</p><p>{selectRefId.Length}</p>");
        if (iConfirm == false) return;
        ShowHideLoading();
        _labelResults = await LeUsService.CreateShipment(selectRefId.ToList(), ShareUserInfo?.UserId);
        var lId = _labelResults.Where(w => w.Success == true).Select(s => s.RequestId).ToList();
        var oUps = _items?.Where(w => lId.Contains(w.ReferenceId)).ToList();
        if (oUps is { Count: > 0 })
        {
            foreach (var cUp in oUps)
            {
                cUp.ShipmentStatus = 2;
            }
        }

        FilterBy();
        await ToggleModal();
    }

    private async Task GetLabel()
    {
        var selectRefId = await JsRuntime.InvokeAsync<string[]>("GetCheckBoxAtt", "select-shipment-item", "reference-id");
        if (selectRefId.Length == 0) return;
        ShowHideLoading();
        var result = await LeUsService.GetLabel(selectRefId.ToList(), ShareUserInfo?.UserId, iFileName);
        if (result.content.Length > 0)
        {
            using var stream = new MemoryStream(result.content);
            var dotnetStream = new DotNetStreamReference(stream);
            await CallJs("downloadFileFromStream", result.code, dotnetStream);
            //await BlazorDownloadFile(result.code, result.fileType, result.content);
        }

        ShowHideLoading(isShow: false, initTable: true);
    }

    private async Task CancelLabel()
    {
        var selectRefId = await JsRuntime.InvokeAsync<string[]>("GetCheckBoxAtt", "select-shipment-item", "reference-id");
        if (selectRefId.Length == 0) return;
        var sRefId = selectRefId.Aggregate((a, b) => $"{a}, {b}");
        var iConfirm = await Confirm($"Do you want to cancel these label? <p>This is a list of reference:</p><p>{sRefId}</p>");
        if (iConfirm == false) return;
        ShowHideLoading();
        _labelResults = await LeUsService.CancelShipment(selectRefId.ToList(), ShareUserInfo?.UserId);
        ShowHideLoading(isShow: false, initTable: true);
        await ToggleModal();
        await GetData();
    }

    private async Task OnSaveChange(AddEditDataRequest<CShipmentDto> arg)
    {
        ShowHideLoading();
        if (arg.Action == ActionCommandType.Edit)
        {
            arg.Data!.Weight = arg.Data.Boxes!.Sum(s => s.Weight);
            arg.Data.ServiceId = $"{Services.FirstOrDefault(w => w.ServiceCode == arg.Data.ServiceCode)?.Id}";
            var result = await Mediator.Send(new AddEditShipmentCommand()
            {
                Request = arg
            });
            if (result.Succeeded)
            {
                var oFind = _items?.FirstOrDefault(w => w.Id == arg.Data.Id);
                if (oFind != null)
                {
                    arg.Data.Price = result.Data.Price;
                    arg.Data.PriceCode = result.Data.PriceCode;
                    arg.Data.ChargeWeight = result.Data.ChargeWeight;
                    arg.Data.Remote = result.Data.Remote;
                    arg.Data.Adapt(oFind);
                }
            }
        }

        await CallJs("fixedToolbar", false);
        await CallInitRangeDate();
        ShowEdit = false;
        ShowHideLoading(isShow: false, initTable: true);
    }

    private string GetUnitType(int unitType)
    {
        return unitType switch
        {
            1 => "oz",
            2 => "kg",
            _ => "lb"
        };
    }

    private void ShowHideLoading(bool isShow = true, bool initTable = false)
    {
        IsLoading = isShow;
        HideTable = isShow;
        InitDataTable = initTable;
        StateHasChanged();
    }

    private async Task FilterData(int state)
    {
        lstCheckship = [];
        ShowHideLoading();
        await Task.Delay(500);
        iState = state;
        FilterBy();
    }

    private async Task DeleteShipment()
    {
        var selectRefId = await JsRuntime.InvokeAsync<string[]>("GetCheckBoxAtt", "select-shipment-item", "reference-id");
        if (selectRefId.Length == 0) return;
        var iConfirm = await Confirm($"Do you want to delete {selectRefId.Length} shipment?");
        if (iConfirm == false) return;
        ShowHideLoading();
        await Mediator.Send(new DeleteShipmentByRefIdCommand()
        {
            RefIds = selectRefId.ToList()
        });
        ShowHideLoading(isShow: false, initTable: true);
    }

}