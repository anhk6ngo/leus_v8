// <auto-generated />
using System;
using LeUs.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeUs.Migrations
{
    [DbContext(typeof(PortalContext))]
    [Migration("20250509001608_AddSerCubit")]
    partial class AddSerCubit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeUs.Domain.Catalog.CAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNoIssuerCountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNoType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("caddresss");
                });

            modelBuilder.Entity("LeUs.Domain.Catalog.CCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Continent")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ccountrys");
                });

            modelBuilder.Entity("LeUs.Domain.Catalog.CCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("SignContract")
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("ccustomers");
                });

            modelBuilder.Entity("LeUs.Domain.Catalog.CService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GoodType")
                        .HasColumnType("integer");

                    b.Property<bool>("HasApi")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHide")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Numerator")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ServiceNo")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.Property<bool>("UseCubic")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseLocation")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("cservices");
                });

            modelBuilder.Entity("LeUs.Domain.Catalog.CStoreAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNoIssuerCountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxNoType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("cstoreaddresss");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CHistoryLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CratedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("chistorylabels");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxCubic")
                        .HasColumnType("double precision");

                    b.Property<string>("PriceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PriceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Ratio")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cprices", (string)null);
                });

            modelBuilder.Entity("LeUs.Domain.Data.CPriceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CPriceId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChargeWeightType")
                        .HasColumnType("integer");

                    b.Property<int>("GoodType")
                        .HasColumnType("integer");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<int>("Min")
                        .HasColumnType("integer");

                    b.Property<string>("Price")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("PriceType")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CPriceId");

                    b.ToTable("cpricedetails");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CShipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ApiName1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BatteryType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("BoxQty")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<double?>("CancelFee")
                        .HasColumnType("double precision");

                    b.Property<double?>("ChargeWeight")
                        .HasColumnType("double precision");

                    b.Property<int>("ClearanceType")
                        .HasColumnType("integer");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreateLabelDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("CustomsCurrency")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("DimensionUnit")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("DutyType")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("EntryPoint")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FbaCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FbaPoId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FbaShipmentId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PackageType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PriceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("PromotionAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ReferenceId2")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ReferenceId3")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<double?>("Remote")
                        .HasColumnType("double precision");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ServiceCode1")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ShipmentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureRequired")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("SyncGetLabel")
                        .HasColumnType("boolean");

                    b.Property<string>("TrackIds")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TrackingNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<string>("WeightUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("ZonePrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.HasIndex(new[] { "IsActive", "CreatedOn", "CreatedBy" }, "IX_Shipment_UserIndex");

                    b.ToTable("cshipmentss", (string)null);
                });

            modelBuilder.Entity("LeUs.Domain.Data.CTopUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccNote")
                        .HasColumnType("text");

                    b.Property<double?>("ApproveAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("GateWay")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeposit")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double?>("RequestAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive", "RequestDate", "Status", "UserId");

                    b.ToTable("ctopups");
                });

            modelBuilder.Entity("LeUs.Domain.Data.UserBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double>("DepositAmount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("userbalances");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CPrice", b =>
                {
                    b.OwnsMany("LeUs.Application.Interfaces.Data.PriceZone", "Zones", b1 =>
                        {
                            b1.Property<Guid>("CPriceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("Zone")
                                .HasColumnType("text");

                            b1.HasKey("CPriceId", "Id");

                            b1.ToTable("cprices");

                            b1.ToJson("Zones");

                            b1.WithOwner()
                                .HasForeignKey("CPriceId");
                        });

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CPriceDetail", b =>
                {
                    b.HasOne("LeUs.Domain.Data.CPrice", null)
                        .WithMany("Details")
                        .HasForeignKey("CPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeUs.Domain.Data.CShipment", b =>
                {
                    b.OwnsOne("LeUs.Application.Dtos.Gps.CCod", "Cod", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision");

                            b1.Property<string>("Currency")
                                .HasMaxLength(33)
                                .HasColumnType("character varying(33)");

                            b1.HasKey("CShipmentId");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Cod");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsMany("LeUs.Application.Dtos.Gps.CCustom", "Customs", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Brand")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("DestDescription")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<string>("DestMaterial")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("DestUsage")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("HsCode")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LocalDescription")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<string>("LocalMaterial")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LocalUsage")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Modal")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("OriginCountryCode")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PicBase64")
                                .HasColumnType("text");

                            b1.Property<int>("Qty")
                                .HasColumnType("integer");

                            b1.Property<string>("SaleUrl")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Sku")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<double?>("UnitValue")
                                .IsRequired()
                                .HasColumnType("double precision");

                            b1.Property<double?>("UnitWeight")
                                .IsRequired()
                                .HasColumnType("double precision");

                            b1.HasKey("CShipmentId", "Id");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Customs");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsMany("LeUs.Application.Dtos.Gps.CManifestBox", "Boxes", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("BoxQty")
                                .HasColumnType("integer");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision");

                            b1.Property<double>("Length")
                                .HasColumnType("double precision");

                            b1.Property<double>("Weight")
                                .HasColumnType("double precision");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("CShipmentId", "Id");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Boxes");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");

                            b1.OwnsMany("LeUs.Application.Dtos.Gps.CProduct", "Products", b2 =>
                                {
                                    b2.Property<Guid>("CManifestBoxCShipmentId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("CManifestBoxId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<int>("Qty")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Sku")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.HasKey("CManifestBoxCShipmentId", "CManifestBoxId", "Id");

                                    b2.ToTable("cshipmentss", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("CManifestBoxCShipmentId", "CManifestBoxId");
                                });

                            b1.Navigation("Products");
                        });

                    b.OwnsOne("LeUs.Application.Dtos.Gps.CPackageCustomerReference", "PackageCustomerReferences", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CustomerRefenrece")
                                .HasColumnType("text");

                            b1.Property<string>("DepartmentNumber")
                                .HasColumnType("text");

                            b1.Property<string>("InvoiceNumber")
                                .HasColumnType("text");

                            b1.Property<string>("PoNumber")
                                .HasColumnType("text");

                            b1.HasKey("CShipmentId");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("PackageCustomerReferences");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsMany("LeUs.Application.Dtos.Gps.LabelDetail", "Labels", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Label")
                                .HasColumnType("text");

                            b1.Property<string>("TrackignNo")
                                .HasColumnType("text");

                            b1.HasKey("CShipmentId", "Id");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Labels");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsOne("LeUs.Application.Dtos.Gps.CAddress", "Consignee", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Company")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)");

                            b1.Property<string>("County")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Email")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("IdNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PhoneNumberExt")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("RoomNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("State")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNoIssuerCountryCode")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNoType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("CShipmentId");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Consignee");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsMany("LeUs.Application.Dtos.Gps.CProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("Qty")
                                .HasColumnType("integer");

                            b1.Property<string>("Sku")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("CShipmentId", "Id");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Products");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.OwnsOne("LeUs.Application.Dtos.Gps.CAddress", "Shipper", b1 =>
                        {
                            b1.Property<Guid>("CShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Company")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)");

                            b1.Property<string>("County")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Email")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("IdNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PhoneNumberExt")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("RoomNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("State")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNo")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNoIssuerCountryCode")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("TaxNoType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("CShipmentId");

                            b1.ToTable("cshipmentss", (string)null);

                            b1.ToJson("Shipper");

                            b1.WithOwner()
                                .HasForeignKey("CShipmentId");
                        });

                    b.Navigation("Boxes");

                    b.Navigation("Cod");

                    b.Navigation("Consignee");

                    b.Navigation("Customs");

                    b.Navigation("Labels");

                    b.Navigation("PackageCustomerReferences");

                    b.Navigation("Products");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("LeUs.Domain.Data.CPrice", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
